// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	accessrequestsv1 "git.spreadomat.net/deleng/kubectl-audit/apis/accessrequests/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAccessRequests implements AccessRequestInterface
type FakeAccessRequests struct {
	Fake *FakeAccessrequestsV1
	ns   string
}

var accessrequestsResource = schema.GroupVersionResource{Group: "accessrequests.spreadgroup.com", Version: "v1", Resource: "accessrequests"}

var accessrequestsKind = schema.GroupVersionKind{Group: "accessrequests.spreadgroup.com", Version: "v1", Kind: "AccessRequest"}

// Get takes name of the accessRequest, and returns the corresponding accessRequest object, and an error if there is any.
func (c *FakeAccessRequests) Get(ctx context.Context, name string, options v1.GetOptions) (result *accessrequestsv1.AccessRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(accessrequestsResource, c.ns, name), &accessrequestsv1.AccessRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*accessrequestsv1.AccessRequest), err
}

// List takes label and field selectors, and returns the list of AccessRequests that match those selectors.
func (c *FakeAccessRequests) List(ctx context.Context, opts v1.ListOptions) (result *accessrequestsv1.AccessRequestList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(accessrequestsResource, accessrequestsKind, c.ns, opts), &accessrequestsv1.AccessRequestList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &accessrequestsv1.AccessRequestList{ListMeta: obj.(*accessrequestsv1.AccessRequestList).ListMeta}
	for _, item := range obj.(*accessrequestsv1.AccessRequestList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested accessRequests.
func (c *FakeAccessRequests) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(accessrequestsResource, c.ns, opts))

}

// Create takes the representation of a accessRequest and creates it.  Returns the server's representation of the accessRequest, and an error, if there is any.
func (c *FakeAccessRequests) Create(ctx context.Context, accessRequest *accessrequestsv1.AccessRequest, opts v1.CreateOptions) (result *accessrequestsv1.AccessRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(accessrequestsResource, c.ns, accessRequest), &accessrequestsv1.AccessRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*accessrequestsv1.AccessRequest), err
}

// Update takes the representation of a accessRequest and updates it. Returns the server's representation of the accessRequest, and an error, if there is any.
func (c *FakeAccessRequests) Update(ctx context.Context, accessRequest *accessrequestsv1.AccessRequest, opts v1.UpdateOptions) (result *accessrequestsv1.AccessRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(accessrequestsResource, c.ns, accessRequest), &accessrequestsv1.AccessRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*accessrequestsv1.AccessRequest), err
}

// Delete takes name of the accessRequest and deletes it. Returns an error if one occurs.
func (c *FakeAccessRequests) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(accessrequestsResource, c.ns, name, opts), &accessrequestsv1.AccessRequest{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAccessRequests) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(accessrequestsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &accessrequestsv1.AccessRequestList{})
	return err
}

// Patch applies the patch and returns the patched accessRequest.
func (c *FakeAccessRequests) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *accessrequestsv1.AccessRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(accessrequestsResource, c.ns, name, pt, data, subresources...), &accessrequestsv1.AccessRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*accessrequestsv1.AccessRequest), err
}
